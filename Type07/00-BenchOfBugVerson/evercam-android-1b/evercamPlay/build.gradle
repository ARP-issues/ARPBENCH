buildscript {
    repositories {
        maven { url 'https://maven.fabric.io/public' }
    }

    dependencies {
        classpath 'io.fabric.tools:gradle:1.+'
    }
}
apply plugin: 'com.android.application'
apply plugin: 'io.fabric'

android {
    compileSdkVersion 23
    buildToolsVersion "23.0.1"

    defaultConfig {
        applicationId "io.evercam.androidapp"
        minSdkVersion 14
        targetSdkVersion 23

        //Enable multiDex, but the better solution is to reduce method number
        multiDexEnabled = true

        ndk {
            moduleName "android_launch"
        }
    }

    //Increase memory to avoid build error 'OutOfMemoryError: GC overhead limit exceeded'
    dexOptions {
        javaMaxHeapSize "2048M"
    }

    // ./gradlew crashlyticsUploadSymbolsRelease
    signingConfigs {
        release
    }

    buildTypes {
        release {
            signingConfig signingConfigs.release
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.txt'
        }
    }

    sourceSets.main {
        jniLibs.srcDir 'src/main/libs'
        jni.srcDirs = ['jni'] //disable automatic ndk-build call
    }

    //Exclude files that causes duplicate files error when packaging
    packagingOptions {
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/NOTICE.txt'
        exclude 'META-INF/DEPENDENCIES'
    }

    //Deal with "Method ... not mocked." error
    testOptions {
        unitTests.returnDefaultValues = true
    }

    lintOptions {
        abortOnError false
    }

    splits {
        abi {
            enable true
            reset()
            include 'armeabi'
            universalApk true
        }
    }
}

apply plugin: 'com.android.application'

repositories {
    mavenCentral()
    maven {
        url "https://mint.splunk.com/gradle/"
    }
    maven { url 'https://maven.fabric.io/public' }
}

dependencies {
    compile project(':supertoasts')
    compile fileTree(dir: 'libs', include: ['*.jar'])
    compile 'com.android.support:support-v4:23.1.1'
    compile 'com.android.support:appcompat-v7:23.1.1'
    //Snackbar - Should be replaced with com.android.support:design:23.1.0
    //Now continue using the nispok snackbar lib because 22.2.0 doesn't have callback provided
    compile 'com.nispok:snackbar:2.11.0'
    compile 'joda-time:joda-time:2.6'
    compile 'com.squareup.picasso:picasso:2.5.0'
    compile 'io.keen:keen-client-api-android:2.1.1@aar'
    compile 'com.squareup.okhttp:okhttp:2.3.0'
    compile "com.mixpanel.android:mixpanel-android:4.6.4"
    compile 'com.google.android.gms:play-services:8.3.0'
    compile "com.splunk.mint:mint:4.2.1"
    //Material floating action button
    compile 'com.getbase:floatingactionbutton:1.10.0'
    //The scroll view library to show/hide toolbar
    compile 'com.github.ksoichiro:android-observablescrollview:1.6.0'
    //Required for observablescrollview
    compile 'com.nineoldandroids:library:2.4.0'
    //PhotoView library for browsing saved images
    compile 'com.commit451:PhotoView:1.2.4'
    //Enable Multidex
    compile 'com.android.support:multidex:1.0.1'
    compile('org.simpleframework:simple-xml:2.7.1') {
        exclude module: 'stax'
        exclude module: 'stax-api'
        exclude module: 'xpp3'
    }

    //Test dependencies
    testCompile 'junit:junit:4.12'
    compile('com.crashlytics.sdk.android:crashlytics:2.5.2@aar') {
        transitive = true;
    }
    compile('com.crashlytics.sdk.android:crashlytics-ndk:1.1.2@aar') {
        transitive = true;
    }
}

crashlytics {
    enableNdk true
    androidNdkOut 'src/main/obj'
    androidNdkLibsOut 'src/main/libs'
}

def props = new Properties()

props.load(new FileInputStream(rootProject.file("release.properties")))

android.signingConfigs.release.storeFile rootProject.file(props.keyStore)

android.signingConfigs.release.storePassword props.keyStorePassword

android.signingConfigs.release.keyAlias props.keyAlias

android.signingConfigs.release.keyPassword props.keyAliasPassword